@import "syntax-variables";

atom-text-editor,
:host {
	background-color: @syntax-background-color;
	color: @syntax-text-color;
	
	.wrap-guide {
		background-color: @syntax-wrap-guide-color;
	}
	
	.indent-guide {
		color: @syntax-indent-guide-color;
	}
	
	.invisible-character {
		color: @syntax-invisible-character-color;
	}
	
	.gutter {
		color: @syntax-gutter-text-color;
	}
	
	.invisible {
		color: @syntax-text-color;
	}
	
	.cursor {
		border-color: @syntax-cursor-color;
	}
	
	.selection .region {
		background-color: @syntax-out-of-focus-selection-color;
	}
	
	.is-focused {
		.selection .region {
			background-color: @syntax-selection-color;
		}
	}
	
	.line.cursor-line {
		background-color: @syntax-cursor-line-color;
	}
	
	.bracket-matcher .region {
		border: 1px solid @syntax-bracket-matcher-color;
		box-sizing: border-box;
	}
}

atom-text-editor::shadow {
	.find-result .region {
		background-color: @syntax-result-marker-color;
		border-radius: 0;
		z-index: -1;
	}
	
	.current-result .region,
	.current-result ~ .highlight.selection .region {
		background-color: @syntax-result-marker-color-selected;
		border-color: @syntax-result-marker-color-selected;
		border-radius: 0;
		z-index: -1;
	}
}

.comment {
	color: @palette-4;
	
	.keyword,
	.markup.link {
		color: inherit;
	}
}

.entity {
	&.name {
		&.function.constructor {
			color: @hue-1;
		}
		
		&.tag {
			color: @hue-5;
			
			&.wildcard {
				color: @palette-1;
			}
		}
		
		&.type.class {
			color: @hue-1;
			
			.entity.other.inherited-class {
				color: @palette-1;
			}
			
			.punctuation.separator.inheritance {
				color: @hue-2;
			}
		}
	}
	
	&.other {
		&.attribute-name {
			color: @hue-1;
			
			&.attribute {
				color: @hue-5;
			}
			
			&.parent-selector,
			&.pseudo-class,
			&.pseudo-element {
				color: @palette-1;
			}
		}
	}
}

.keyword {
	color: @hue-2;
	
	&.control.at-rule {
		color: @hue-1;
		
		.keyword {
			color: inherit;
		}
	}
	
	&.operator {
		color: @palette-1;
		
		&.control,
		&.delete,
		&.in,
		&.instanceof,
		&.logic.media,
		&.new,
		&.of,
		&.typeof,
		&.void {
			color: @hue-2;
		}
	}
	
	&.other {
		&.special-method {
			color: @hue-1;
		}
		
		&.unit {
			color: @hue-4;
		}
	}
}

.storage {
	color: @hue-2;
	
	&.type.arrow {
		color: @palette-1;
	}
}

.constant {
	&.character.entity {
		color: @hue-6;
	}
	
	&.language {
		color: @hue-6;
	}
	
	&.numeric {
		color: @hue-4;
	}
	
	&.other {
		&.property {
			color: @hue-1;
		}
		
		&.symbol {
			color: @hue-5;
		}
	}
}

.variable {
	&.language {
		color: @hue-2;
	}
	
	&.other {
		&.block {
			color: @hue-1;
		}
		
		&.property {
			color: @hue-1;
		}
		
		&.readwrite {
			&.class,
			&.instance {
				color: @hue-1;
			}
			
			&.global {
				color: @hue-5;
			}
		}
	}
	
	&.parameter.function {
		color: @hue-1;
	}
}

.string {
	color: @hue-3;
	
	.embedded {
		color: @palette-1;
	}
	
	.keyword.regexp {
		color: inherit;
	}
}

.punctuation {
	&.section.embedded {
		&.coffee,
		&.js,
		&.ruby {
			color: @hue-3;
		}
		
		&.erb,
		&.php {
			color: @hue-2;
		}
	}
}

.support {
	&.constant.media {
		color: @hue-1;
	}
	
	&.function {
		color: @hue-5;
	}
	
	&.type.property-name {
		color: @hue-1;
	}
}

.meta {
	&.at-rule.import {
		.support.function {
			color: @hue-6;
		}
	}
	
	&.function,
	&.method,
	&.method-call {
		.entity.name.function {
			color: @hue-1;
		}
	}
	
	&.function.arguments {
		.variable.other {
			color: @hue-1;
		}
	}
	
	&.function-call {
		&.object,
		&.static {
			color: @hue-1;
		}
	}
	
	&.property-value {
		.constant {
			color: @hue-6;
			
			&.numeric {
				color: @hue-4;
			}
		}
		
		.punctuation.section.function {
			& + .constant.other.color.rgb-value {
				color: @hue-4;
			}
		}
		
		.support {
			&.constant.font-name {
				color: @hue-5;
			}
			
			&.function {
				color: @hue-6;
			}
		}
		
		.variable.parameter {
			color: @hue-3;
		}
	}
	
	&.tag {
		.punctuation.definition.string.html {
			color: @palette-1;
		}
	}
}

.underline {
	text-decoration: underline;
}

.invalid {
	&.deprecated {
		background-color: @syntax-color-modified;
		color: @palette-3;
	}
	
	&.illegal {
		background-color: @syntax-color-removed;
		color: @palette-3;
	}
}

// Languages

.markup {
	&.bold {
		color: @hue-5;
		font-weight: bold;
	}
	
	&.changed {
		color: @syntax-color-modified;
	}
	
	&.deleted {
		color: @syntax-color-removed;
	}
	
	&.heading {
		color: @hue-1;
	}
	
	&.inserted {
		color: @hue-2;
	}
	
	&.italic {
		color: @hue-3;
		font-style: italic;
	}
	
	&.link {
		color: @hue-3;
	}
	
	&.quote {
		color: @hue-5;
	}
	
	&.raw {
		color: @hue-2;
	}
}

.source.coffee {
	.entity.name.function {
		color: @hue-1;
	}
	
	.variable {
		&.assignment {
			color: @hue-1;
		}
		
		// NOTE: Remove if atom/language-coffee-script
		// excludes the round braces from the
		// "variable.parameter.function" token
		
		&.parameter.function {
			color: @palette-1;
		}
	}
}

.source.js {
	.meta.delimiter.method {
		& + .support.function {
			color: @hue-1;
		}
	}
	
	.support.constant {
		color: @hue-1;
	}
}

.source.json {
	.meta.structure {
		&.dictionary {
			& > .string.quoted {
				color: @hue-1;
				
				& > .punctuation.string {
					color: @palette-1;
				}
			}
		}
		
		&.array,
		&.dictionary {
			& > .value > .string.quoted,
			& > .value > .string.quoted > .punctuation {
				color: @hue-3;
			}
		}
	}
}

.source.less {
	.keyword.control.logical.operator {
		color: @palette-1;
	}
	
	// NOTE: Remove if atom/language-less
	// adds the "meta.property-value" token
	// for variable values
	
	.constant.other.rgb-value {
		color: @hue-6;
	}
	
	.support.constant {
		&.color.w3c-standard-color-name {
			color: @hue-6;
		}
		
		&.font-name {
			color: @hue-5;
		}
	}
	
	.variable.parameter {
		color: @hue-3;
	}
}

.source.php {
	.support.function.magic {
		color: @hue-1;
	}
}

.source.scss {
	.entity.name.function {
		color: @hue-1;
	}
	
	// NOTE: Remove if atom/language-sass
	// adds the "meta.property-value" token
	// for variable values
	
	.constant.other.color.rgb-value {
		color: @hue-6;
	}
	
	.punctuation.section.function {
		& + .constant.other.color.rgb-value {
			color: @hue-4;
		}
	}
	
	.support.constant {
		&.color.w3c-standard-color-name {
			color: @hue-6;
		}
		
		&.font-name {
			color: @hue-5;
		}
		
		&.property-value {
			color: @hue-6;
		}
	}
	
	.variable.parameter {
		color: @hue-3;
	}
}
